package com.example.demo;

import com.fasterxml.jackson.databind.util.JSONPObject;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.jpa.repository.Query;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import sun.security.util.Password;

import javax.jws.soap.SOAPBinding;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import java.util.*;

@Controller // This means that this class is a Controller
@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
@CrossOrigin
public class MainController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;
    @Autowired
    private AppartmentRepository appartmentRepository;
    @Autowired
    private BookingRepository bookingRepository;
    //////////////////////////////////////////////////////////////
    ///USERS
    ////////////////////////////////////////////////////////////////
    @PostMapping(path="/newUser") // Map ONLY POST Requests
    public @ResponseBody String addNewUser(@RequestBody String jsonStr) throws JSONException
    {
        JSONObject obj=new JSONObject(jsonStr);
        User n=new User();
        Optional<User> temp=this.userRepository.findById(obj.getString("username"));
        if(temp.isPresent())
            return "USER ALLREADY EXISTS SORRY";
        n.setUserName(obj.getString("username"));
        n.setPassword(obj.getString("password"));
        n.setEmail(obj.getString("email"));
        n.setFirstName(obj.getString("firstname"));
        n.setLastName(obj.getString("lastname"));
        n.setPhoneNumber(obj.getString("phonenumber"));
        if(obj.getBoolean("Request"))
        {
            n.setRequestforOwner(true);
            n.setOwner(false);
            n.setRenter(true);
            this.userRepository.save(n);
            return "YOU WILL BE NOTIFIED";
        }
        else{
            n.setOwner(false);
            n.setRenter(true);
            n.setRequestforOwner(false);
            this.userRepository.save(n);
            return "OK";
        }
    }

    @GetMapping(path="/admin")
    public @ResponseBody Iterable<User> getAllUsers(@RequestParam("adminUSN")String usn,@RequestParam("adminPSW")String psw) {
        // This returns a JSON or XML with the users
        if(usn.equals("admin1") && psw.equals("123"))
            return userRepository.findAll();
        //SORRY NO ADMIN PRIVILEGES
        return null;
    }
    @GetMapping(path="/oneUser")
    public @ResponseBody Optional<User> getUserById(@RequestParam("username") String usn)
    {
       //return userRepository.FindByUsername(usn);
        Optional<User>Result=userRepository.findById(usn);
       if(!Result.isPresent())
            return null;
         User temp=Result.get();
         return Result;
         /*System.out.println(temp.getPassword());
         System.out.println(psw);
         return null;*/

    }
    @PutMapping("/EditUserData/Password")
    public @ResponseBody String updatePassword(@RequestBody String jsonStr) throws  JSONException
    {
        JSONObject obj=new JSONObject(jsonStr);
        String username=obj.getString("username");
        String newPassword=obj.getString("newPassword");
        Optional<User> usr=userRepository.findById(username);
        if(!usr.isPresent())
            return "WRONG USERNAME";
        User found=usr.get();
        found.setPassword(newPassword);
        this.userRepository.save(found);
        return "YOUR PASSWORD HAS CHANGED";
    }
    @PutMapping("/EditUserData/Email")
    public @ResponseBody String updateEmail(@RequestBody String jsonStr) throws  JSONException
    {
        JSONObject obj=new JSONObject(jsonStr);
        String username=obj.getString("username");
        String newEmail=obj.getString("newEmail");
        Optional<User> usr=userRepository.findById(username);
        if(!usr.isPresent())
            return "WRONG USERNAME";
        User found=usr.get();
        found.setEmail(newEmail);
        this.userRepository.save(found);
        return "YOUR EMAIL HAS CHANGED";
    }
    //////////////////////////////////////////////////////////////////////////////////////////////////////
    ////APPARTMENTS
    ///////////////////////////////////////////////////////////
    @PostMapping(path="/newApartment")
    public @ResponseBody String addNewAppartment(@RequestBody String jsonStr) throws JSONException
    {
        System.out.println("fuck me");
        JSONObject jObject = new JSONObject(jsonStr);
        String tempName=jObject.getString("Ownername");
        String tempPSW=jObject.getString("OwnerPassword");

        Optional<User> result=userRepository.findById(tempName);
        if(!result.isPresent())
            return "ERROR USERNAME OR PASSWORD WRONG";
        else if(!tempPSW.equals(result.get().getPassword()))
            return "WRONG PASSWORD";
        //if(!result.get().getOwner())
          //  return "USER DOEN'T HAVE APPARTMENT OWNER PRIVILEGES";
        appartment n=new appartment();

        n.setSize((float) jObject.getDouble("size"));
        n.setOwnername(jObject.getString("Ownername"));
        n.setHasheat(jObject.getBoolean("hasHeat"));
        n.setFloor(jObject.getInt("floor"));
        n.setPrice(jObject.getInt("Price"));
        n.setIdAvailable(true);
        n.setAllowPets(jObject.getBoolean("AllowPets"));
        n.setAllowSmoking(jObject.getBoolean("AllowSmoking"));
        n.setAddress(jObject.getString("Address"));
        n.setHasParking(jObject.getBoolean("HasParking"));
        n.setHasWifi(jObject.getBoolean("HasWifi"));
        n.setCapacity(jObject.getInt("capacity"));
        JSONArray jArray=jObject.getJSONArray("Dates");
        ArrayList<String> listdata = new ArrayList<String>();
        if (jArray != null) {
            for (int i=0;i<jArray.length();i++){
                listdata.add(jArray.getString(i));
            }
        }
        n.setDates(listdata);
        ///now it is time to set location
        n.setLocation(jObject.getString("country")+"+"+jObject.getString("town")+"+"+jObject.getString("neighborhood"));
        appartmentRepository.save(n);
        return "AppartmentAdded";
    }
    @GetMapping("/allApartments")
    public @ResponseBody Iterable<appartment> getAllAppartments(/*@RequestBody String jsonStr*/)throws JSONException
    {
     //   JSONObject obj=new JSONObject(jsonStr);
       // String adminName=obj.getString("adminName");
        //String adminPsw=obj.getString("password");
        //if(adminName.equals("admin1") && adminPsw.equals("123"))
        return appartmentRepository.findAll();
        // return null;

    }
    @GetMapping("/AppByUsr")
    public @ResponseBody Iterable<appartment> getApartmentsByUsrID(@RequestParam("username") String usn) throws JSONException
    {

      Optional<User> test =userRepository.findById(usn);
      if(!test.isPresent())
          return null;
      List<appartment> result=appartmentRepository.findByownernameAllIgnoringCase(usn);
      return  result;
    }
    @GetMapping("Appartments/ById")
    public @ResponseBody Optional<appartment> findAppById(@RequestParam("id")Integer id){
        return this.appartmentRepository.findById(id);
    }
    @GetMapping("/ByLocation")
    public @ResponseBody Iterable<appartment> getApartmentsByLocation(@RequestParam("country") String country,@RequestParam("city")String city
    ,@RequestParam("neighborhood")String neighborhood) throws  JSONException
    {

        String Location=country+"+"+ city +"+"+ neighborhood;
        return appartmentRepository.findBylocationOrderByPriceAllIgnoringCase(Location);
       // return null;

    }
    @GetMapping("/ByLocation/Dates")
    public @ResponseBody Iterable<appartment> getApartmentsByLocationDates(
            @RequestParam("capacity") Integer capacity,
            @RequestParam("startD")String st, @RequestParam("endD")String end,
            @RequestParam("country") String country,@RequestParam("city")String city
            ,@RequestParam("neighborhood")String neighborhood) throws  JSONException
    {

        String Location=country+"+"+ city +"+"+ neighborhood;
        List<appartment> opt=this.appartmentRepository.findByLocationAndCapacityOrderByPriceAllIgnoringCase(Location,capacity);
        Iterator itr = opt.iterator();
        while (itr.hasNext())
        {
            appartment app=(appartment)itr.next();
            if(!app.getDates().contains(st) || !app.getDates().contains(end))
                    itr.remove();
        }
        return opt;
        // return null;
    }
    @DeleteMapping("appartment")
    public @ResponseBody String DeleteApartment(@RequestParam Integer id) throws JSONException{

        Optional<appartment> temp=appartmentRepository.findById(id);
        if(!temp.isPresent())
            return "ERROR";
        this.appartmentRepository.delete(temp.get());
        return "OK";
    }
    @GetMapping("appartment/data")
    public  @ResponseBody Optional<appartment> getAppartmentData(@RequestBody String jsonStr) throws JSONException
    {
        JSONObject obj=new JSONObject(jsonStr);
        return this.appartmentRepository.findById(obj.getInt("id"));
    }
    @PostMapping("admin/ConfirmRequest")
    public @ResponseBody String CofirmRequest(@RequestBody String jsonStr) throws JSONException
    {
       // System.out.println("fuck me");
        JSONObject obj=new JSONObject(jsonStr);
        String usn=obj.getString("username");
        Optional<User> temp=this.userRepository.findById(usn);
        if(!temp.isPresent())
            return "ERROR";
        User existing=temp.get();
        existing.setOwner(true);
        existing.setRequestforOwner(false);
        this.userRepository.save(existing);
        return "SUCCESS";
    }
    @GetMapping("admin/GetAllRequests")
    public @ResponseBody Iterable<User> getAllRequestingUsers(){
        List<User> result=this.userRepository.getAllByRequestforOwner(true);
        return result;
    }
    ///////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////
    @PostMapping("appartment/book")
    public @ResponseBody String BookApp(@RequestBody String jsonStr) throws JSONException{
        JSONObject obj=new JSONObject(jsonStr);
        String renter= obj.getString("renter");
        System.out.println(renter);
        Integer id=obj.getInt("appId");
        JSONArray jArray=obj.getJSONArray("Dates");
        ArrayList<String> listdata = new ArrayList<String>();
        if (jArray != null) {
            for (int i=0;i<jArray.length();i++){
                listdata.add(jArray.getString(i));
            }
        }
        appartment temp=this.appartmentRepository.findById(id).get();
        temp.removeDates(listdata);
        this.appartmentRepository.save(temp);
        Booking n=new Booking();
        n.setAppId(id);
        n.setUserName(renter);
        n.setDatesBooked(listdata);
        this.bookingRepository.save(n);
        return "OK";
    }
    @GetMapping("getBookings")
    @ResponseBody Iterable< Booking> getBookings(@RequestParam("id") Integer appId){
        return this.bookingRepository.findByAppId(appId);
    }
}
