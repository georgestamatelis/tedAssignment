package com.example.demo;

import com.fasterxml.jackson.databind.util.JSONPObject;
import org.json.JSONException;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.jpa.repository.Query;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import sun.security.util.Password;

import javax.jws.soap.SOAPBinding;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import java.util.List;
import java.util.Optional;

@Controller // This means that this class is a Controller
@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
public class MainController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;
    @Autowired
    private AppartmentRepository appartmentRepository;

    @PostMapping(path="/newUser") // Map ONLY POST Requests
    public @ResponseBody String addNewUser (@RequestParam("username") String usn, @RequestParam("email") String email,
                                            @RequestParam("isOwner") boolean isOwner,@RequestParam("password")String psw) {
        //need to ad querie to check if username exists as well
        Optional<User> temp=userRepository.findById(usn);
        if(temp.isPresent())
            return "I AM SORRY BUT USERNAME IS TAKEN TRY ANOTHER ONE ";
        if(!isOwner) {
            if(psw.length()<=3)
                return  "SORRY PASSWORD TOO WEAK";
            User n = new User();
            n.setUserName(usn);
            n.setEmail(email);
            n.setPassword(psw);
            userRepository.save(n);
            return "USER CREATED";
        }
        else{
           //figure it later
           return "YOUR REQUEST HAS BEEN MADE KNOWN TO THE ADMIN YOU WILL BE NOTIFIED ON YOUR EMAIL";
        }
    }

    @GetMapping(path="/admin")
    public @ResponseBody Iterable<User> getAllUsers(@RequestParam("adminUSN")String usn,@RequestParam("adminPSW")String psw) {
        // This returns a JSON or XML with the users
        if(usn.equals("admin1") && psw.equals("123"))
            return userRepository.findAll();
        //SORRY NO ADMIN PRIVILEGES
        return null;
    }
    @GetMapping(path="/oneUser")
    public @ResponseBody Optional<User> getUserById(@RequestParam("username") String usn,@RequestParam("password")String psw){
       //return userRepository.FindByUsername(usn);
        Optional<User>Result=userRepository.findById(usn);
       if(!Result.isPresent())
            return null;
         User temp=Result.get();
         if(psw.equals(temp.getPassword()))
             return Result;
         System.out.println(temp.getPassword());
         System.out.println(psw);
         return null;

    }

    @PostMapping(path="/newApartment")
    public @ResponseBody String addNewAppartment(@RequestBody String jsonStr) throws JSONException
    {
        JSONObject jObject = new JSONObject(jsonStr);
        String tempName=jObject.getString("Ownername");
        String tempPSW=jObject.getString("OwnerPassword");
        Optional<User> result=userRepository.findById(tempName);
        if(!result.isPresent())
            return "ERROR USERNAME OR PASSWORD WRONG";
        else if(!tempPSW.equals(result.get().getPassword()))
            return "WRONG PASSWORD";
        appartment n=new appartment();
        n.setSize((float) jObject.getDouble("size"));
        n.setOwnername(jObject.getString("Ownername"));
        n.setLocation(jObject.getString("location"));
        n.setHasheat(jObject.getBoolean("hasHeat"));
        n.setFloor(jObject.getInt("floor"));
        n.setPrice(jObject.getInt("Price"));
        n.setIdAvailable(true);
        appartmentRepository.save(n);
        return "AppartmentAdded";
    }
    @GetMapping("/allApartments")
    public @ResponseBody Iterable<appartment> getAllAppartments(@RequestBody String jsonStr)throws JSONException
    {
        JSONObject obj=new JSONObject(jsonStr);
        String adminName=obj.getString("adminName");
        String adminPsw=obj.getString("password");
        if(adminName.equals("admin1") && adminPsw.equals("123"))
            return appartmentRepository.findAll();
         return null;

    }
    @GetMapping("/AppByUsr")
    public @ResponseBody Iterable<appartment> getApartmentsByUsrID(@RequestBody String jsonStr) throws JSONException
    {
      JSONObject obj=new JSONObject(jsonStr);
      String Username=obj.getString("Username");
      Optional<User> test =userRepository.findById(Username);
      if(!test.isPresent())
          return null;
      List<appartment> result=appartmentRepository.findByownernameAllIgnoringCase(Username);
      return  result;
    }
    @GetMapping("/ByLocation")
    public @ResponseBody Iterable<appartment> getApartmentsByLocation(@RequestBody String jsonStr) throws  JSONException
    {
        JSONObject obj=new JSONObject(jsonStr);
        String Location=obj.getString("location");
        return appartmentRepository.findBylocationOrderByPriceAllIgnoringCase(Location);
        //return null;

    }
    @PutMapping("/EditUserData/Password")
    public @ResponseBody String updatePassword(@RequestBody String jsonStr) throws  JSONException
    {
        JSONObject obj=new JSONObject(jsonStr);
        String username=obj.getString("username");
        String newPassword=obj.getString("newPassword");
        Optional<User> usr=userRepository.findById(username);
        if(!usr.isPresent())
            return "WRONG USERNAME";
        User found=usr.get();
        found.setPassword(newPassword);
        this.userRepository.save(found);
        return "YOUR PASSWORD HAS CHANGED";
    }
    @PutMapping("/EditUserData/Email")
    public @ResponseBody String updateEmail(@RequestBody String jsonStr) throws  JSONException
    {
        JSONObject obj=new JSONObject(jsonStr);
        String username=obj.getString("username");
        String newEmail=obj.getString("newEmail");
        Optional<User> usr=userRepository.findById(username);
        if(!usr.isPresent())
            return "WRONG USERNAME";
        User found=usr.get();
        found.setEmail(newEmail);
        this.userRepository.save(found);
        return "YOUR EMAIL HAS CHANGED";
    }
    @GetMapping("appartment/data")
    public  @ResponseBody Optional<appartment> getAppartmentData(@RequestBody String jsonStr) throws JSONException
    {
        JSONObject obj=new JSONObject(jsonStr);
        return this.appartmentRepository.findById(obj.getInt("id"));
    }
}
